class Vector2 {
  x = 0;
  y = 0;

  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
}

class Colors {
  static bgColor = "#222326";
  static cloudColor = "#a6a6a6";
  static birdColor = "#FFFF00";
}

class Bird {
  position = null;
  width = 60;
  height = 60;
  velocity = new Vector2(0, 0);

  texture = new Image(16, 16);

  jumpVelocity = 15;

  gravity = -1;
  maxFallSpeed = -15;

  isAlive = true;

  constructor(x, y) {
    this.position = new Vector2(x, y);
  }

  draw(ctx) {
    this.texture.src = "Flappy Bird.png";

    // hitbox
    // ctx.strokeStyle = Colors.birdColor;
    // ctx.strokeRect(this.position.x, this.position.y, this.width, this.height);

    ctx.drawImage(
      this.texture,
      this.position.x,
      this.position.y,
      this.width,
      this.height
    );
  }

  getPosition2() {
    return new Vector2(
      this.position.x + this.width,
      this.position.y + this.height
    );
  }
}

class Cloud {
  position = null;
  size = null;
  widthToHeightRatio = 16 / 28;
  velocity = new Vector2(-10, 0);
  scored = false;

  texture = new Image(16, 28);

  constructor(width, screenWidth, screenHeight) {
    this.size = new Vector2(width, width * this.widthToHeightRatio);
    this.position = new Vector2(
      screenWidth,
      randomIncl(0, screenHeight - this.size.y)
    );
  }

  draw(ctx) {
    // hitbox
    // ctx.strokeStyle = Colors.cloudColor;
    // ctx.strokeRect(this.position.x, this.position.y, this.size.x, this.size.y);

    this.texture.src = "Cloud.png";
    ctx.drawImage(
      this.texture,
      this.position.x,
      this.position.y,
      this.size.x,
      this.size.y
    );
  }

  isTouchingBird(bird) {
    if (
      this.position.x > bird.getPosition2().x ||
      this.position.x + this.size.x < bird.position.x
    )
      return false;
    if (
      bird.getPosition2().y < this.position.y ||
      bird.position.y > this.position.y + this.size.y
    )
      return false;
    return true;
  }
}

function clamp(min, max, input) {
  return Math.min(Math.max(input, min), max);
}

function randomIncl(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

const canvas = document.getElementById("canvas");
const ctx = canvas.getContext("2d");
ctx.imageSmoothingEnabled = false;
ctx.msImageSmoothingEnabled = false; // For Internet Explorer/Edge
ctx.oImageSmoothingEnabled = false; // For older versions of Opera

const screenWidth = canvas.width;
const screenHeight = canvas.height;

const cloudSizeRange = new Vector2(50, 100);
const timeBetweenClouds = 500; // ms
const quickSuccessionChance = 0.1;

const textFont = "system-ui";
const scoreFontSize = 30;
const gameOverFontSize = 100;
const scorePadding = 30;
const scorePos = new Vector2(scorePadding, scorePadding + 30);

document.addEventListener("keypress", (event) => Jump(event));
document.addEventListener("click", () => Jump("click"));

function Jump(event) {
  if (event == "click" || event.code == "Space") {
    bird.velocity.y = bird.jumpVelocity;
  }
}

function GameDraw() {
  ctx.clearRect(0, 0, screenWidth, screenHeight);

  ctx.fillStyle = Colors.bgColor;
  ctx.fillRect(0, 0, screenWidth, screenHeight);

  clouds.forEach((cloud) => {
    cloud.draw(ctx);
  });

  bird.draw(ctx);

  DrawText(`Score: ${score}`, "start", scorePos, scoreFontSize, textFont);
}

let timeSinceLastCloud = 0;
let bird = new Bird(100, screenHeight / 2);
let clouds = [];
let score = 0;

function DrawText(text, align, position, fontSize, font) {
  ctx.textAlign = align;
  ctx.font = `${fontSize}px ${font}`;
  ctx.fillStyle = "white";
  ctx.fillText(text, position.x, position.y);
}

function Start() {
  DrawText(`Score: ${score}`, "start", scorePos, scoreFontSize, textFont);
}

function Update(timestamp) {
  if (bird.isAlive) {
    GameLoop(timestamp - lastRender);

    lastRender = timestamp;
    window.requestAnimationFrame(Update);
  } else GameOver();
}

function StartGameLoop() {
  score = 0;
  clouds = [];
  timeSinceLastCloud = 0;
  bird.isAlive = true;
}

function GameLoop(delta) {
  if (timeSinceLastCloud > timeBetweenClouds) {
    let cloud = new Cloud(
      randomIncl(cloudSizeRange.x, cloudSizeRange.y),
      screenWidth,
      screenHeight
    );

    clouds.push(cloud);

    if (randomIncl(0, 9) < quickSuccessionChance) {
      // sets the time til the next cloud to the amount of time it takes for the other cloud to move its width, stopping overlap
      // d/v = t taken to travel it then subtracted from the time that the next cloud will spawn at
      timeSinceLastCloud = timeBetweenClouds * 0.5;
    } else timeSinceLastCloud = 0;
  } else timeSinceLastCloud += delta;

  clouds.forEach((cloud) => {
    if (cloud.position.x + cloud.size.x < bird.position.x) {
      if (!cloud.scored) score += 1;
      cloud.scored = true;
    }

    if (cloud.position.x + cloud.size.x < 0 || clouds.length > 10) {
      clouds.shift();
    } else {
      cloud.position.x += cloud.velocity.x;
    }

    if (cloud.isTouchingBird(bird)) {
      bird.isAlive = false;
    }
  });

  bird.velocity.y += bird.gravity;
  bird.velocity.y = clamp(
    bird.maxFallSpeed,
    bird.jumpVelocity,
    bird.velocity.y
  );

  bird.position.y -= bird.velocity.y;
  bird.position.y = clamp(0, screenHeight - bird.height, bird.position.y);

  GameDraw();
}

function GameOver() {
  alert(`Your score is: ${score}\nReload to play again`);
}

function Restart() {}

Start();
StartGameLoop();

var lastRender = 0;
window.requestAnimationFrame(Update);

document.addEventListener(canvas.onload, Start());
