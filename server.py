#!/usr/bin/python3

from flask import Flask, request, send_file
from termcolor import colored
import socket, shutil, os, datetime

app = Flask(__name__)

# Set the folder where uploaded files will be stored
UPLOADS_FOLDER = os.path.join(os.getcwd(), "Uploads")
os.makedirs(UPLOADS_FOLDER, exist_ok=True)
OUTPUTS_FOLDER = os.path.join(os.getcwd(), "Outputs")
os.makedirs(OUTPUTS_FOLDER, exist_ok=True)

SHELL_FOLDER = os.path.join(os.getcwd(), "Shell-Scripts")


def setIPinDeploy():
    with open(f"{SHELL_FOLDER}/deploy.sh", "r") as file:
        lines = file.readlines()

    with open(f"{SHELL_FOLDER}/deploy.sh", "w") as file:
        for line in lines:
            if "CURRENTIP=" in line:
                hostname = socket.gethostname()
                ip = socket.gethostbyname(hostname)
                file.write(f"CURRENTIP={str(ip)}\n")
            else:
                file.write(line)


@app.route("/upload", methods=["POST", "GET"])
def upload_file():
    if "file" not in request.files:
        return "No file provided", 400

    # if 'user' not in request.args:
    #     return 'No user provided', 400

    file = request.files["file"]
    user = request.args["user"]

    if file.filename == "":
        return "No selected file", 400

    if not file:
        return "Invalid filename", 400

    os.makedirs(f"{UPLOADS_FOLDER}/{user}", exist_ok=True)
    filepath = f"{UPLOADS_FOLDER}/{user}/{file.filename}"

    file.save(filepath)
    return f'{user} succesfully uploaded the file: "{file.filename}"', 200


# output a text file that is appeneded to user's running output
@app.route("/output", methods=["POST", "GET"])
def output_file():
    if "file" not in request.files:
        return "No file provided", 400
    if "user" not in request.args:
        return "No user provided", 400

    uploadedFile = request.files["file"]
    user = request.args["user"]

    if uploadedFile.filename == "":
        return "No selected file", 400
    if not uploadedFile:
        return "Invalid filename", 400

    filename = f"{user} Output.txt"
    filepath = f"{OUTPUTS_FOLDER}/{filename}"

    current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with open(uploadedFile, "r") as infile:
        content = infile.read()

    # Write the current date and time followed by the content to the output file
    with open(filepath, "w") as outfile:
        outfile.write(f"{current_datetime}\n{content}\n\n")

    print(f"{user} succesfully uploaded the output file")

    return 200


@app.route("/download/<filename>", methods=["GET"])
def download_file(filename):
    path = f"{SHELL_FOLDER}/{filename}"

    if filename == "deploy.sh":
        setIPinDeploy()

    return send_file(path, as_attachment=False)


@app.route("/deploy", methods=["GET"])
def deploy_file():
    if "user" not in request.args:
        return "No user provided", 400

    user = request.args["user"]

    path = f"./Deployed-Scripts/{user}.sh"

    if not os.os.path.exists(path):
        shutil.copyfile("Deployed-Scripts/default.sh", path)

    if os.os.path.exists(path):
        return send_file(path, as_attachment=False)
    else:
        return "File not found", 404


@app.route("/print", methods=["POST"])
def print_message():
    if "input" not in request.form:
        return "No input provided", 400
    if "user" not in request.form:
        return "No user provided", 400

    input = request.form["input"]
    user = request.form["user"]
    print(colored(f"Print message from {user}: {input}", "white", "on_green"))

    return "OK", 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)
